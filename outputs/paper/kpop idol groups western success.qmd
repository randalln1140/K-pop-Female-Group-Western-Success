---
title: "Success Factors of Survival K-pop Idol Groups in the Western Market ^[Code and data are available at: https://github.com/randalln1140/K-pop-Female-Group-Western-Success]"
date: "4 April 2023"
date-format: long
author: "Randall Ni"
abstract: "With the success of K-pop idol groups such as BTS and Twice entering the Western market, the question for many other companies became whether they can reproduce the success for their own idol groups. To explore whether specific elements of the songs correlate with increasing hits and audiences, this paper aims to investigate the relationship between danceability, energy, valence, tempo, and listener counts on Spotify. In order to maintain fairness, this paper will only analyze female k-pop idol groups that were formed due to survival shows.This ensures that they have an adequate fanbase and are comparable to each other. By utilizing data pulled from Spotify API, we found that listener counts are closely correlated with tempo and danceability. In addition, implications and possible reasons behind this correlation are discussed and explanations for outliers are provided."
format: pdf
documentclass: article
geometry: margin = 1in 
bibliography: references.bib
---

## 1. Introduction
The Korean pop music industry, commonly known as K-pop, has seen a surge in popularity worldwide over the past few years. K-pop has become a global phenomenon, and its popularity has continued to grow steadily, particularly in Western markets. One factor that has contributed to the increasing popularity of K-pop in the West is the emergence of survival shows that form K-pop groups. These shows, such as "Produce 101" and "Girls Planet 999" , have become increasingly popular in recent years and have been instrumental in the formation of many successful K-pop groups.

The success of these survival show groups has also led to an increase in the overall popularity of K-pop in the Western market. As the popularity of K-pop continues to grow, there is a growing need for the industry to expand in the Western market. This expansion is important for several reasons. Firstly, the Western market represents a significant opportunity for growth, with a large and diverse audience that is hungry for new and exciting music. Secondly, expanding into the Western market can provide K-pop groups with access to new revenue streams, such as merchandise sales, concerts, and collaborations with Western artists. Finally, expanding into the Western market can help to establish K-pop as a mainstream genre, and solidify its position as a global cultural phenomenon. Therefore, I'm interested in whether increasing hits and audiences is correlated with any factors from the songs. If so, which attributes will affect the song's popularity the most? And is it possible to predict how popular a song can be in the future based on certain attributes?

The data used in this report is obtained from Spotify API. The datasets are specified to the five survival show K-pop idol groups that I have selected, and it provides different kinds of information about every released songs such as danceability, tempo, and valence. In these data sets, Iâ€™m particularly interested in the different attribute values between their most popular songs and least popular songs, and if we can establish any trends based on these statistics . In section 2, cleaned data sets are obtained and explained to perform further analysis. Visualizations in the forms of tables and figures are presented to help to explain the possible correlation between the different attributes and the listener count on Spotify. In section 3, a model is constructed to justify the relationship between tempo, danceability and listener count, and to make future predictions. The interpretation of the final model along with all the findings regarding the potential success factors for K-pop songs in the Western market is presented in section 4. A discussion is carried out in section 5 on the implications of the findings regarding tempo and danceability, and possible application to K-pop songwriters and composers, as well as the weaknesses and future steps of this paper.




## 2. Data

```{r}
#| message: false
#| warning: false
#| echo: false

##Load Library
library(spotifyr)
library(tidyverse)
library(janitor)
library(knitr)


##Read Data Sets
izone_top <- 
  readRDS(here::here("inputs/data/izone_top.rds"))
kep1er_top <- 
  readRDS(here::here("inputs/data/kep1er_top.rds"))
mml_top <- 
  readRDS(here::here("inputs/data/mml_top.rds"))
fromis_top <- 
  readRDS(here::here("inputs/data/fromis_top.rds"))
ioi_top <- 
  readRDS(here::here("inputs/data/ioi_top.rds"))
izone_top10_features <- 
  readRDS(here::here("inputs/data/izone_top10_features.rds"))
kep1er_top10_features <-
  readRDS(here::here("inputs/data/kep1er_top10_features.rds"))
mml_top10_features <- 
  readRDS(here::here("inputs/data/mml_top10_features.rds"))
ioi_top10_features <- 
  readRDS(here::here("inputs/data/ioi_top10_features.rds"))
f9_top10_features <- 
  readRDS(here::here("inputs/data/f9_top10_features.rds"))


## Merge features with their respective songs by the "id" variable
izone_merge <-
  merge(izone_top, izone_top10_features, by =c("id"))
kep1er_merge <-
  merge(kep1er_top, kep1er_top10_features, by =c("id"))
mml_merge <-
  merge(mml_top, mml_top10_features, by =c("id"))
ioi_merge <-
  merge(ioi_top, ioi_top10_features, by =c("id"))
f9_merge <-
  merge(fromis_top, f9_top10_features, by =c("id"))


## Adding a column to clearly show artist name for each data set
iz_artist_name <- 
  c("IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE","IZ*ONE")
izone_merge$artist_name <- iz_artist_name

kp_artist_name <- 
  c("Kep1er","Kep1er","Kep1er","Kep1er","Kep1er","Kep1er","Kep1er","Kep1er","Kep1er","Kep1er")
kep1er_merge$artist_name <- kp_artist_name

mml_artist_name <- 
  c("Momoland","Momoland","Momoland","Momoland","Momoland","Momoland","Momoland","Momoland","Momoland","Momoland")
mml_merge$artist_name <- mml_artist_name

ioi_artist_name <- 
  c("I.O.I","I.O.I","I.O.I","I.O.I","I.O.I","I.O.I","I.O.I","I.O.I","I.O.I","I.O.I")
ioi_merge$artist_name <- ioi_artist_name

f9_artist_name <- 
  c("fromis_9","fromis_9","fromis_9","fromis_9","fromis_9","fromis_9","fromis_9","fromis_9","fromis_9","fromis_9")
f9_merge$artist_name <- f9_artist_name


## Weed out unnecessary information before merging all data sets into one
izone_final <-
  izone_merge |>
  select(name, popularity, album.name, album.release_date, danceability, energy, key, loudness, speechiness, acousticness, time_signature, valence, tempo, artist_name)

kep1er_final <-
  kep1er_merge |>
  select(name, popularity, album.name, album.release_date, danceability, energy, key, loudness, speechiness, acousticness, time_signature, valence, tempo, artist_name)

mml_final <-
  mml_merge |>
  select(name, popularity, album.name, album.release_date, danceability, energy, key, loudness, speechiness, acousticness, time_signature, valence, tempo, artist_name)

ioi_final <-
  ioi_merge |>
  select(name, popularity, album.name, album.release_date, danceability, energy, key, loudness, speechiness, acousticness, time_signature, valence, tempo, artist_name)

f9_final <-
  f9_merge |>
  select(name, popularity, album.name, album.release_date, danceability, energy, key, loudness, speechiness, acousticness, time_signature, valence, tempo, artist_name)


## Combine all data sets into one 
kpop_final <-
  rbind(f9_final, ioi_final, kep1er_final, mml_final, izone_final)


## Clean up column names
kpop_final <-
  clean_names(kpop_final)


```

```{r}
#| message: false
#| warning: false
#| echo: false
## Make a table to show top 10 tracks from selected groups in descending popularity
kpop_final_descending <-
  kpop_final[order(kpop_final$popularity, decreasing = TRUE),]

kpop_final_ascending <-
  kpop_final[order(kpop_final$popularity, decreasing = FALSE),]

kpop_final_descending |>
  top_n(10, popularity) |>
  select(name, popularity, album_release_date, artist_name) |>
  knitr::kable("pipe", align = "lrcr", caption = "Extracting Top 10 Most Popular Tracks made by Selected Kpop Idol Groups", col.names = c("Track Name", "Popularity", "Album Release Date", "Artist Name"))

kpop_final_ascending |>
  filter(popularity < 48) |>
  select(name, popularity, album_release_date, artist_name) |>
  knitr::kable("pipe", align = "lrcr", caption = "Extracting Top 11 Least Popular Tracks made by Selected K-pop Idol Groups", col.names = c("Track Name", "Popularity", "Album Release Date", "Artist Name"))
```

```{r}
#| message: false
#| warning: false
#| echo: false


kpop_final_descending |>
  top_n(10, popularity) |>
  ggplot(aes(x = name, y = danceability, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))


kpop_final |>
  filter(popularity < 48) |>
  ggplot(aes(x = name, y = danceability, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

```

```{r}
#| message: false
#| warning: false
#| echo: false

kpop_final |>
  top_n(10, popularity) |>
  ggplot(aes(x = name, y = energy, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

kpop_final |>
  filter(popularity < 48) |>
  ggplot(aes(x = name, y = energy, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

```

```{r}
#| message: false
#| warning: false
#| echo: false

kpop_final_descending |>
  top_n(10, popularity) |>
  ggplot(aes(x = name, y = speechiness, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

kpop_final |>
  filter(popularity < 48) |>
  ggplot(aes(x = name, y = speechiness, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

```

```{r}
#| message: false
#| warning: false
#| echo: false

kpop_final_descending |>
  top_n(10, popularity) |>
  ggplot(aes(x = name, y = acousticness, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

kpop_final |>
  filter(popularity < 48) |>
  ggplot(aes(x = name, y = acousticness, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
```

```{r}
#| message: false
#| warning: false
#| echo: false

kpop_final_descending |>
  top_n(10, popularity) |>
  ggplot(aes(x = name, y = valence, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

kpop_final |>
  filter(popularity < 48) |>
  ggplot(aes(x = name, y = valence, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
```

```{r}
#| message: false
#| warning: false
#| echo: false

kpop_final_descending |>
  top_n(10, popularity) |>
  ggplot(aes(x = name, y = tempo, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))

kpop_final |>
  filter(popularity < 48) |>
  ggplot(aes(x = name, y = tempo, fill = artist_name)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
```








## 3. Model

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

```{r}


```

## 4. Results
```{r}
#| message: false
#| warning: false
#| echo: false

library(rstanarm)
first_model <-
  readRDS(file = here::here("outputs/models/first_model.rds"))
modelsummary::modelsummary(
  list(
    "First model" = first_model
  ),
  statistic = "mad",
  fmt = 2
)


```

## 5. Discussion

## 6. Appendix

## 7. References
